import { readPath } from './diagOperations.js';
import { path } from './util/vars.js';

//first get d attribute from dom path element.
const _path_attr = path.getAttribute("d");
//now read path segments from the d attribute.
const _path_segs = readPath(_path_attr); 



console.log(_path_segs);


const scaleX = 2;
const scaleY = 2;



const isOdd = (n) => {
    return Math.abs(n % 2) == 1;
}






/**
 * groups segments such that each group's first segment has "m" or "M" data name.
 * @param {array} segments 
 */
const groupSegments = (segments) => {
    var groupedSegs = [];
    var tempArr = [];

    //===============Alogrithm to groups segments==================
    //1. find segment that has "M" or "m" data name.
    //2. push that segment in tempArr.
    //3. if segment's dataName is other than "m" or "M" push that segment in tempArr also;
    //4. if next segment found is "m" or "M" then push tempArr to groupedSegs array.
    //5. reset tempArr.
    //6. got to step:1 and repeat the process until segments are found.
    //7. lastly check if tempArr is not empty then push this array to groupedSegs array.
    //8. return the groupedSegs array.
    //=============================================================

    segments.forEach(_segment => {
        //1. find segment that has "M" or "m" data name.
        if(_segment[0].toLowerCase() == 'm') {

            //4. if next segment found is "m" or "M" then push tempArr to groupedSegs array.
            if(tempArr.length > 0) {
                groupedSegs.push(tempArr);
                //5. reset tempArr.
                tempArr = [];
            }

            //2. push that segment in tempArr.
            tempArr.push(_segment);
        }
        else {
            //3. if segment's dataName is other than "m" or "M" push that segment in tempArr also;
            tempArr.push(_segment);
        }
        //console.log(_segment);
        //6. got to step:1 and repeat the process until segments are found.
    });

    //7. lastly check if tempArr is not empty then push this array to groupedSegs array.
    if(tempArr.length > 0) {
        groupedSegs.push(tempArr);
        //5. reset tempArr.
        tempArr = [];
    }

    //8. return the groupedSegs array.
    return groupedSegs;

}

groupSegments(_path_segs);






const generateNewSegs = (segments, scaleX, scaleY) => {
    var newPathArr = [];
    var newPathStr = "";
    var tempArr = [];
    //===============Alogrithm to generate new path=========================
    //1. get grouped segments.
    //2. create json object that contains: 
            //  i. first segments copy of the group that contains "m" data.
            // ii. difference X
            // iv. difference Y
            //ii. second is full original segments array.
    //3. push that object in tempArr.
    //4. get each group from temp Array and generate new segments with scaleX and scaleY.
    //5. check the difference between new m values and new m values.
    //6. subtract that values from all segments.
    //7. lastly push all segments to newPathArr.
    //8. join newPathArr to newPathStr string.
    //9. return that string which is the new generated path.
    //======================================================================




    //1. get grouped segments.
    const groupedSegs = groupSegments(segments);
    //2. create json object that contains: 
            //  i. first segments copy of the group that contains "m" data.
            // ii. difference X
            // iv. difference Y
            //ii. second is full original segments array.

    groupedSegs.forEach(_group => {

        const dataObj = {
            mData: _group[0],   //make sure that _group[0] has only m data points
            diffX: 0,//((_group[0][1] * scaleX) - (_group[0][1])), //_group[0][1])
            diffY: 0,//((_group[0][2] * scaleY) - (_group[0][2])), //_group[0][2])
            originalGroup: _group
        }
        console.log(dataObj);
        //3. push that object in tempArr.
        tempArr.push(dataObj);
    });

    console.log(tempArr);

    //4. get each group from temp Array and generate new segments with scaleX and scaleY.
    tempArr.forEach((dataObj, tempArrIndex) => {
        dataObj.originalGroup.forEach(_segment => {
            //5. check the difference between new m values and new m values.
            //6. subtract that values from all segments.
            for (let i = 1; i < _segment.length; i++) {

                //if loop index is odd it is X point otherwise it is Y point.
                if(isOdd(i)){
                    //it is the X point block. now generate new values with scaleX
                    _segment[i] = (_segment[i] * scaleX) - tempArr[tempArrIndex].diffX;
                }
                else {
                    //it is the Y point block. now generate new values with scaleY
                    _segment[i] = (_segment[i] * scaleY) - tempArr[tempArrIndex].diffY;
                }
                
            }

            //7. lastly push all segments to newPathArr.
            newPathArr.push(_segment);
            console.log(_segment);
        })
        console.log("================================");
    });

    //8. join newPathArr to string.
    newPathStr = newPathArr.join(" ");
    //replace commas with space from the newPathStr if axisted any.
    newPathStr = newPathStr.replace(/,/gi, " ");

    console.log(newPathStr);
    //9. return that string which is the new generated path.
    return newPathStr;
    



}

generateNewSegs(_path_segs, 3, 3);





const oldPath = `M 10 10 L 10 30 L 30 30 L 30 10 L 10 10 Z`;
//const newPath = `M 20 20 L 20 60 L 60 60 L 60 20 L 20 20 Z`;
const newPath = `M 10 10 L 10 50 L 50 50 L 50 10 L 10 10 Z`;

const linePath = `M 10 10 L 30 10 L 30 30 L 10 30 L 10 10 Z`;
const linePathSegs = readPath(linePath);
const newlinePath =  generateNewSegs(linePathSegs, 2, 2); //`M 10 10 L 30 10 M 20 20 L 40 20`;

const testPath1 = `M77.09262060734042,106.59184153562916 C77.09262060734042,106.59184153562916 66.91701610538738,105.906465523749 61.52803287448856,103.2863054783318 C56.13904964358887,100.66611343291396 53.62420953266211,97.32537737500652 53.62420953266211,97.32537737500652 C53.62420953266211,97.32537737500652 56.452311576996905,100.20691342495435 60.42101015420721,102.39020946279906 C62.84060739927979,103.72128148587157 65.68433742123436,104.7928655044461 68.5696483993724,104.7928655044461 C68.5696483993724,104.7928655044461 64.114972396769,102.5002574647066 60.77353518644426,104.13776149309076 C60.77353518644426,104.13776149309076 63.180665168472885,102.63116946697583 67.34813757338397,103.77750548684611 C71.51585581165035,104.92380950671593 73.599328621224,104.26870549536044 73.599328621224,104.26870549536044 C73.599328621224,104.26870549536044 66.55799404874689,104.23596949479301 63.50407650757086,102.40182546300045 C60.45012384734535,100.56768143120786 59.69562615930168,99.5198094130443 59.69562615930168,99.5198094130443 C59.69562615930168,99.5198094130443 62.857288948424994,102.5002574647066 65.30031060040209,102.86054547095176 C67.74333225238,103.22083347719692 71.94673144629067,102.79484946981306 71.94673144629067,102.79484946981306 C71.94673144629067,102.79484946981306 67.5997304535336,102.89328147151924 66.23433687629183,102.3363534618656 C64.86918913240683,101.7797134522169 59.480205901506224,100.66611343291396 58.51028795566825,102.99145747322093 C58.51028795566825,102.99145747322093 59.587916030404344,100.53494543064032 64.50988612335888,101.2555214431307 C69.43185621631358,101.97609745562096 69.89915030666559,101.74697745164944 69.89915030666559,101.74697745164944 C69.89915030666559,101.74697745164944 61.16872986544054,98.66806539828035 56.28268656148572,100.40403342837124 C51.396608138479586,102.13996945846156 51.71998435852807,103.61382548400894 51.71998435852807,103.61382548400894 C51.71998435852807,103.61382548400894 52.043395697626856,98.5044173954437 63.97108964551619,99.4213774113381 C63.97108964551619,99.4213774113381 58.40257782677115,98.66806539828035 56.35446990138312,97.16150537216606 C54.30692388080858,95.6549133460512 54.16304112955572,94.67248132902186 54.16304112955572,94.67248132902186 C54.16304112955572,94.67248132902186 56.49810681928018,97.91478538522318 59.37249577260968,97.94752138579062 C62.24663889258308,97.98048138636197 63.072955039575916,97.75113738238657 63.072955039575916,97.75113738238657 C63.072955039575916,97.75113738238657 57.46830571752563,96.5720973619494 54.80958285534659,96.83392136648779 C52.151105826523455,97.09603337103113 47.84003162276709,97.94752138579062 45.57650343958491,94.21376132107054 C45.57650343958491,94.21376132107054 47.69614887151425,97.78387338295397 53.48060773381579,96.53936136138192 C59.26478564371215,95.29462533980598 62.89318061837338,96.67027336365112 62.89318061837338,96.67027336365112 C62.89318061837338,96.67027336365112 54.12711434055673,95.1309453369688 52.33063441436932,93.59164931028697 C50.534400321538065,92.05232128360466 50.31898006374388,89.39916923761562 50.31898006374388,89.39916923761562 C50.31898006374388,89.39916923761562 51.07347775178775,93.85347331482546 54.773656066347115,94.27948932220988 C58.47439628571975,94.70521732958927 64.07879977441445,94.6067853278831 65.55190348055301,96.14633735456937 C65.55190348055301,96.14633735456937 61.8514442135866,93.65708931142142 58.00710219536739,93.98464131709903 C54.16304112955572,94.31219332277672 48.23498046840784,98.8319694011214 45.21720043053696,97.65292938068423 C42.19945551171701,96.473889360247 40.83406193447503,97.45632137727628 40.83406193447503,97.45632137727628 C40.83406193447503,97.45632137727628 42.091745382820214,96.3100173574066 44.247001532291655,96.83392136648779 C46.4028195865769,97.35811337557399 46.86983272452169,98.14412938919864 50.570291991487956,95.81878534889164 C54.270751258453146,93.49344130858468 60.55786909529323,90.61120125862463 64.54581291235874,93.10019330176816 C64.54581291235874,93.10019330176816 45.91213620837219,88.39516922021252 43.90048185774616,78.83168105444136 C43.90048185774616,78.83168105444136 45.671992138792575,85.20812916496911 54.773656066347115,88.04627321416483 C63.8756009463081,90.8844172633605 64.40217599446187,90.6664652595826 64.40217599446187,90.6664652595826 C64.40217599446187,90.6664652595826 50.36709316338192,89.31238523611133 43.804220539419646,77.78358503627396 C43.804220539419646,77.78358503627396 49.50435856067801,86.736065191454 58.36668615682192,87.91510521189113 C58.36668615682192,87.91510521189113 50.89370333058616,85.55705717101738 45.09726887195126,78.35164904612058 C39.301642151483975,71.14598492121942 39.061217129497734,68.74380887958064 39.061217129497734,68.74380887958064 C39.061217129497734,68.74380887958064 46.10360527350047,80.27257707941753 59.42088982465456,82.32540911500072 C59.42088982465456,82.32540911500072 48.98947815645092,79.60633706786903 41.51674116357081,70.9270729174248 C34.04403928974113,62.247808766980626 36.37935081282159,60.54460873745775 36.37935081282159,60.54460873745775 C36.37935081282159,60.54460873745775 34.76264530783653,57.43321668352566 35.983875181418526,56.74537667160281 C35.983875181418526,56.74537667160281 33.57674519939023,54.256128628454825 34.259459547536714,52.225600593258136 C34.259459547536714,52.225600593258136 35.983875181418526,59.92220872666927 44.78611408159163,64.96617681410012 C53.588317862714085,70.00988890152657 54.342815550757294,70.63225691231453 54.342815550757294,70.63225691231453 C54.342815550757294,70.63225691231453 45.21720043053696,64.9334408135327 42.343057310563466,62.18211276584182 C39.468914190589665,59.4310087181549 36.235468061568945,57.302048681252 34.36716967643336,51.406848579066086 C34.36716967643336,51.406848579066086 36.16368472167074,57.23657668011715 41.84015250266895,61.23241674938005 C47.51637445031195,65.22825681864295 48.63042098075965,65.16256081750419 48.63042098075965,65.16256081750419 C48.63042098075965,65.16256081750419 36.98996574961284,59.725824723265205 34.22356787758672,50.71900856714321 C34.22356787758672,50.71900856714321 35.840273382571866,57.36774468239078 48.666347769758566,63.721664792528045 C48.666347769758566,63.721664792528045 35.80438171262395,56.810848672737706 34.22356787758672,49.44153654499985 C34.22356787758672,49.44153654499985 33.936329160844224,48.360704526264975 34.47512563868695,47.83676851718319 C34.47512563868695,47.83676851718319 33.82833807953971,46.42835249277006 34.04403928974113,44.65968046211235 C34.259459547536714,42.89123243145848 34.51105242768594,40.99164839853159 34.51105242768594,40.99164839853159 C34.51105242768594,40.99164839853159 33.936329160844224,48.459136527971154 41.91197096161765,54.22342462788791 C41.91197096161765,54.22342462788791 32.49911712465343,43.93865644961427 35.85277576466808,35.467168302771604 C35.85277576466808,35.467168302771604 35.13364296081079,40.13990438376763 37.38519554765961,42.27955242085577 C37.38519554765961,42.27955242085577 35.468748943835344,38.524448355765756 36.37935081282159,34.113536279308065 C36.37935081282159,34.113536279308065 36.1394876956495,38.786304360304676 38.534887914700526,43.02217643372821 C40.93032325280172,47.258048507151784 48.59452931081035,55.4679046494594 48.59452931081035,55.4679046494594 C48.59452931081035,55.4679046494594 39.58912670158245,45.86032048292393 38.15191466539332,40.44540838906319 C36.714983581609104,35.03049629520241 37.528797346506416,31.49337623389087 37.528797346506416,31.49337623389087 C37.528797346506416,31.49337623389087 36.714983581609104,36.55868832169174 40.211717234707145,41.62467240950425 C43.70845088780507,46.69046449731344 44.90629147353392,47.258048507151784 44.90629147353392,47.258048507151784 C44.90629147353392,47.258048507151784 35.27724475965676,38.13072034894095 38.91761533065151,27.999680173331996 C38.91761533065151,27.999680173331996 38.678524832597006,38.26188835121459 42.65424721997303,42.67257642766835 C46.630742226466964,47.083456504125465 47.82752924067145,47.214400506395215 47.82752924067145,47.214400506395215 C47.82752924067145,47.214400506395215 39.63622134874659,41.31894440420485 39.923460065490126,33.06544026114063 C40.21119044894503,24.811904118075873 41.74466380346082,24.37526411050726 41.74466380346082,24.37526411050726 C41.74466380346082,24.37526411050726 38.34289206380927,31.361760231609466 43.8036937536576,38.08732834818883 C49.26474127686105,44.81289646476811 48.16316200945883,43.54611244281003 48.16316200945883,43.54611244281003 C48.16316200945883,43.54611244281003 40.40322141888652,34.37564828385145 41.93616798764016,27.213632159706826 C43.4691145563939,20.051648035562764 46.39084399024355,20.139168037079816 46.39084399024355,20.139168037079816 C46.39084399024355,20.139168037079816 43.181875839651624,22.060352070381146 43.32547763849806,26.471008146834357 C43.4691145563939,30.881696223288174 48.067919143607,39.44092837165176 48.067919143607,39.44092837165176 C48.067919143607,39.44092837165176 42.9419776034275,27.694176168036478 44.33132237333553,24.069280105203404 C45.720140357480894,20.444640042374793 48.64267752949965,19.353120023454657 48.64267752949965,19.353120023454657 C48.64267752949965,19.353120023454657 42.941450817666,22.322688074928404 46.24671540563447,30.27068821269708 C46.24671540563447,30.27068821269708 44.187193788726866,22.71638408175264 49.695581792450426,19.179040020437192 C49.695581792450426,19.179040020437192 45.76800762376393,22.58547207948345 47.39644289172582,28.91734418923855 C47.39644289172582,28.91734418923855 46.91745415744761,21.14364805449123 52.138603444428526,18.48006400832131 C52.138603444428526,18.48006400832131 48.78627932834585,20.8822720499606 48.73813110965661,25.729568133982433 C48.73813110965661,25.729568133982433 49.45673712775237,20.83814404919569 53.432213681772204,18.08704000150873 C53.432213681772204,18.08704000150873 50.41418781054548,22.27926407417571 50.60618366143629,28.30563217863528 C50.60618366143629,28.30563217863528 52.857736248286024,22.367264075701076 53.95984230145009,18 C53.95984230145009,18 54.15081969986717,20.358304040878267 53.336724982563105,23.283744091587117 C52.52263026526041,26.209632142303747 52.13941118259752,26.47148814684268 52.13941118259752,26.47148814684268 C52.13941118259752,26.47148814684268 55.061140616446366,22.541344078718545 55.20502336769939,18.698496012107558 C55.20502336769939,18.698496012107558 55.348660285595486,22.45430407720981 54.1034441002963,25.598656131713234 C54.1034441002963,25.598656131713234 56.47520919813836,23.86009610157747 56.77389672545267,20.0077760348023 C56.778567559213066,19.9503680338072 56.78221994049953,19.89248003280379 56.78583720273512,19.834144031792604 C56.78583720273512,19.834144031792604 57.45604916878598,25.467008129431285 55.013027516808386,30.22729621194493 C52.57000586483062,34.98780829446249 51.42027837873968,35.4242243020272 51.42027837873968,35.4242243020272 C51.42027837873968,35.4242243020272 56.833985421423876,30.751232221026726 57.648080138726904,24.288448109002417 C57.648080138726904,24.288448109002417 57.74381467129145,27.91260817182272 56.3068835875076,31.056736226322258 C54.86991738467361,34.20105628082512 53.336724982563105,36.603264322464405 53.336724982563105,36.603264322464405 C53.336724982563105,36.603264322464405 60.56980957257646,30.61984021874919 59.37249577260968,19.877792032549188 C59.37249577260968,19.877792032549188 60.7613137567552,25.86003213624386 59.51613269050654,30.401856214970707 C58.270916505207175,34.94368029369757 52.138603444428526,41.93065641480808 52.138603444428526,41.93065641480808 C52.138603444428526,41.93065641480808 61.67191562574128,34.24448028157782 62.10275614133019,22.06083207038946 C62.10275614133019,22.06083207038946 63.25248362742161,29.266240195286237 58.869310012310095,35.81654430882758 C58.869310012310095,35.81654430882758 65.3362022703516,29.135296193016494 65.19260047150503,22.781376082879195 C65.19260047150503,22.781376082879195 66.62981250769522,25.99094413851305 65.40802072930008,30.379808214588557 C64.18675573666692,34.76864029066347 58.36668615682192,45.05270446892491 52.33063441436932,47.541952512072925 C52.33063441436932,47.541952512072925 68.7132853172689,39.484800372412245 67.63562212348175,25.66364813283979 C67.63562212348175,25.66364813283979 69.43185621631358,31.951872241838323 67.20453577453753,38.04393634743666 C64.97718021370986,44.13574445303056 56.49810681928018,53.437376614262725 56.49810681928018,53.437376614262725 C56.49810681928018,53.437376614262725 68.6414668583205,43.21878443713619 70.43798190355855,32.082784244107515 C70.43798190355855,32.082784244107515 71.0127051704004,28.67683218506957 70.2940991523058,26.64604814986847 C70.2940991523058,26.64604814986847 73.24030656458343,27.825088170305655 73.4557268223779,32.86905625773655 C73.67114708017256,37.91276834516304 70.79728491260575,44.725376463251116 68.78534960957366,49.50700854613471 C66.77341430654111,54.28886462902224 62.46234010278411,60.64278473915951 62.46234010278411,60.64278473915951 C62.46234010278411,60.64278473915951 76.47375269360394,41.12256040080078 74.46157155721639,31.558848235025756 C74.46157155721639,31.558848235025756 78.05456652864079,35.68560030655784 77.62319922728894,41.05712039966644 C77.19235871170024,46.42835249277006 74.17433284047327,61.36336075164982 65.76756957170323,68.11027286859914 C65.76756957170323,68.11027286859914 74.82112039961937,61.55996875505778 77.33596051054536,49.63817654840837 C77.33596051054536,49.63817654840837 78.62928979548266,43.2842564382711 78.41362370433228,39.81235237808995 C78.41362370433228,39.81235237808995 80.20985779716287,47.148928505260336 79.56331607137267,52.65136060063813 C78.91677434558177,58.15379269601594 72.16239753744108,70.46860890947794 72.16239753744108,70.46860890947794 C72.16239753744108,70.46860890947794 79.56331607137267,60.18432073121261 80.06622087926644,53.764928619940406 C80.06622087926644,53.764928619940406 80.85664535631015,57.62960068692976 80.28192208946719,61.16697674824573 C79.70719882262563,64.7040968095573 76.40193423465563,71.32009692423738 73.599328621224,75.18476899122673 C73.599328621224,75.18476899122673 79.49149761242387,67.45542485724812 80.7130084384131,64.04899279820188 C81.93455438345275,60.64278473915951 81.71885317325176,58.67772870509771 81.71885317325176,58.67772870509771 C81.71885317325176,58.67772870509771 83.15606520944056,69.28956888904072 80.85664535631015,74.26780897533231 C78.5572255031786,79.24604906162392 71.30018972049972,86.64809718992917 70.79728491260575,90.11974525010585 C70.79728491260575,90.11974525010585 74.17433284047327,82.0628491104496 81.50343291545636,80.81811308887367 C88.8325329904397,79.57360106730161 93.00000539535041,81.47321710022908 93.00000539535041,81.47321710022908 C93.00000539535041,81.47321710022908 81.86273592450446,78.19795304345647 75.89874847435571,84.35545715018915 C75.89874847435571,84.35545715018915 72.8810035555361,87.69619320809669 72.80893926323176,90.70937726032643 C72.80893926323176,90.70937726032643 80.56940663956658,85.73113717403479 81.79067163219989,78.91849705594616 C83.01242829154472,72.10611293786205 88.68893119159398,71.05798491969402 88.68893119159398,71.05798491969402 C88.68893119159398,71.05798491969402 82.36564073239796,73.21968095716434 82.4374591913464,79.11513705935471 C82.50927765029421,85.01056116154452 75.25196091520894,91.95388928189846 73.527545281326,91.7575052784944 C73.527545281326,91.7575052784944 79.41971427252678,90.25091325237948 81.50343291545636,85.73113717403479 C81.50343291545636,85.73113717403479 80.13803933821467,90.31635325351377 77.19235871170024,92.96928129949903 C74.24615129942248,95.62217734548366 75.21606924526016,96.7684813653534 75.21606924526016,96.7684813653534 C75.21606924526016,96.7684813653534 76.22215981345448,93.91920131596478 79.16812139237601,91.52812927451838 C82.11432880465384,89.13731323307664 85.99428154041529,85.01056116154452 86.03020832941432,82.22649711328624 C86.06609999936376,79.44268906503244 89.26365445843581,76.65862501677415 89.26365445843581,76.65862501677415 C89.26365445843581,76.65862501677415 86.74881434751016,79.57360106730161 86.64082326620544,81.66982510363708 C86.53311313730899,83.7658251399686 86.89241614635593,87.04108919674127 82.689052071496,89.79241724443209 C78.48540704422969,92.54352129211904 76.7250646213479,97.48905737784375 76.79688308029634,99.65072141531347 C76.79688308029634,99.65072141531347 79.73111489624111,91.93206528152022 88.35382520856832,90.40387325503089 C88.35382520856832,90.40387325503089 80.1140881455484,91.88841728076365 77.19235871170024,100.36064142761906 C77.19235871170024,100.36064142761906 82.65287944914098,91.88889728077191 89.93435809119768,89.66172924216676 C89.93435809119768,89.66172924216676 82.17417166726916,92.67491329439656 78.43778561130404,100.05513742232357 C78.43778561130404,100.05513742232357 80.64122509851495,94.81408133147632 87.53895787214705,94.59612932769845 C87.53895787214705,94.59612932769845 81.79067163219989,95.29462533980598 79.4439112985483,100.2294734253454 C79.4439112985483,100.2294734253454 80.49758818061818,98.13395338902225 84.42572425411852,97.39132937614977 C88.35382520856832,96.64870536327723 91.65856301077524,94.07216131861605 90.84446829347189,91.6263372762208 C90.84446829347189,91.6263372762208 91.85031302830984,95.0320653352548 86.72514410724973,97.30332937462433 C81.59944840042715,99.57459341399388 79.44598332254772,105.01315350826457 79.44598332254772,105.01315350826457 C79.44598332254772,105.01315350826457 83.61984739471002,108.61580957071213 86.9944721080696,111.65174562333628 C86.72805898846903,113.35187365280585 85.80804521386041,113.8196816609148 84.95194811176374,113.99958566403316 C84.64585046472438,114.06390566514803 77.49979088267047,106.73779353815902 77.09262060734042,106.59184153562916 z`;
const testPath1Segs = readPath(testPath1);
const newPath_testPath1 = generateNewSegs(testPath1Segs, 2, 2); //`M 20 20 C 0 20 0 0 0 0 z`

setTimeout(() => {
    path.setAttribute("d", testPath1);
}, 1000);

setTimeout(() => {
    path.setAttribute("d", newPath_testPath1);
}, 2000);
